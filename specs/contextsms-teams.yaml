openapi: "3.0.3"
info:
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
  contact:
    name: Sabrhub API Support Team
    url: https://sabrhub.com/support
    email: support@sabrhub.com
  termsOfService: https://sabrhub.com/terms
  description: |
    # ContextSMS Teams Platform API
    
    **Build unified Microsoft Teams integrations with enterprise messaging capabilities and CSP white-label configuration.**
    
    ## Platform Capabilities  
    - Unified Teams Integration - Connect Teams with external messaging systems
    - Multi-tenant Support - Manage multiple customer organizations efficiently  
    - CSP White-labeling - Brand the platform for your customers
    - Advanced Routing - Intelligent message routing and delivery
    - Real-time Messaging - Instant message delivery and notifications
    
    ## Integration Workflow
    1. **Authenticate** → Secure login with Bearer token
    2. **Configure Team** → Set up organization with CSP settings
    3. **Manage Channels** → Create and configure team channels 
    4. **Route Messages** → Handle message routing and delivery
    5. **Process Webhooks** → Real-time event notifications

servers:
  - url: https://context-sms.sabrhub.com/api/v2
    description: Production Environment (live) - ContextSMS Platform
  - url: https://teams-dev-frontend.sabrhub.com/api/v2
    description: Development Environment (testing) - ContextSMS Platform Dev
  - url: https://api.redocly.com/mock/contextsms-teams/v1
    description: Mock Server (Redocly) — public demo / Try-It

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Bearer token for API authentication. Include as: Authorization: Bearer {token}"

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: Endpoints related to user authentication and token management
  - name: CSP
    description: Endpoints for managing CSP (Create, Update, Read Config, and Get CSP)
  - name: Enterprise Management
    description: APIs for creating, retrieving, listing, and deleting enterprises within a CSP account
  - name: Mapping Management
    description: Manage phone number-to-messaging app mappings across enterprises and CSPs
  - name: Stripe Webhook
    description: Endpoints for handling Stripe webhook events and checking payment status

paths:
  /auth/login:
    post:
      operationId: loginUser
      tags:
        - Authentication
      summary: Authenticate and issue tokens
      description: Authenticate user with username and password to obtain access tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  format: email
                  description: User email address
                password:
                  type: string
                  description: User password
            example:
              username: "test@email.com"
              password: "securePassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: "test@email.com"
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refreshToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  expirationTimeInUTC:
                    type: string
                    format: date-time
                    example: "2024-02-29T15:09:14.242875589"
                  roles:
                    type: array
                    items:
                      type: string
                    example: ["CSP_BUSINESS"]
                  tenantId:
                    type: string
                    example: "Sabrhub"
                  services:
                    type: array
                    items:
                      type: string
                    example: ["Teams"]
        '400':
          description: Bad Request - Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Invalid credentials"
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST "https://teams-dev-frontend.sabrhub.com/api/v2/auth/login" \
              -H "Content-Type: application/json" \
              -d '{"username": "test@email.com", "password": "securePassword123"}'
        - lang: JavaScript
          label: JavaScript
          source: |
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                username: 'test@email.com',
                password: 'securePassword123'
              })
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/auth/login"
            headers = {
                "Content-Type": "application/json"
            }
            payload = {
                "username": "test@email.com",
                "password": "securePassword123"
            }
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  /auth/getaccesstoken:
    post:
      operationId: getAccessToken
      tags:
        - Authentication
      summary: Refresh access token
      description: Retrieves a new access token using a refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - refreshToken
              properties:
                username:
                  type: string
                  format: email
                  example: "test@email.com"
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Successful response with new access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: "test@email.com"
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refreshToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  expirationTimeInUTC:
                    type: string
                    format: date-time
                    example: "2023-11-11T15:09:14.242875589"
                  roles:
                    type: array
                    items:
                      type: string
                    example: ["CSP_BUSINESS"]
                  tenantId:
                    type: string
                    example: "Sabrhub"
                  services:
                    type: array
                    items:
                      type: string
                    example: ["Teams"]
        '400':
          description: Bad Request - Invalid refresh token or credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid refresh token"
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST "https://teams-dev-frontend.sabrhub.com/api/v2/auth/getaccesstoken" \
              -H "Content-Type: application/json" \
              -d '{"username": "test@email.com", "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."}'
        - lang: JavaScript
          label: JavaScript
          source: |
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/auth/getaccesstoken', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                username: 'test@email.com',
                refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
              })
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/auth/getaccesstoken"
            payload = {
                "username": "test@email.com",
                "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
            headers = {"Content-Type": "application/json"}
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  /csp:
    post:
      summary: Create CSP record with info
      description: Creates a new CSP record in the system.
      operationId: createCSP
      tags:
        - CSP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
                - carrier
                - houseNumber
                - streetName
                - city
                - stateCode
                - zip
                - country
                - locationId
                - subAccountId
                - authorizingPersonName
              properties:
                email:
                  type: string
                  format: email
                  example: "test@email.com"
                name:
                  type: string
                  example: "Test CSP"
                carrier:
                  type: string
                  example: "BANDWIDTH"
                houseNumber:
                  type: string
                  example: "700 S"
                streetName:
                  type: string
                  example: "1st ST"
                city:
                  type: string
                  example: "Austin"
                stateCode:
                  type: string
                  example: "TX"
                zip:
                  type: string
                  example: "78704"
                country:
                  type: string
                  example: "USA"
                locationId:
                  type: string
                  example: "844849"
                subAccountId:
                  type: string
                  example: "109733"
                authorizingPersonName:
                  type: string
                  example: "Test CSP"
      responses:
        "200":
          description: Successfully created CSP
          content:
            application/json:
              schema:
                type: object
                properties:
                  cspUserId:
                    type: string
                    example: "CSP0000001"
                  email:
                    type: string
                    format: email
                    example: "test@email.com"
                  name:
                    type: string
                    example: "Test CSP"
                  carrier:
                    type: string
                    example: "BANDWIDTH"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST "https://teams-dev-frontend.sabrhub.com/api/v2/csp" \
              -H "Authorization: Bearer <TOKEN>" \
              -H "Content-Type: application/json" \
              -d '{
                "email": "test@email.com",
                "name": "Test CSP",
                "carrier": "BANDWIDTH",
                "houseNumber": "700 S",
                "streetName": "1st ST",
                "city": "Austin",
                "stateCode": "TX",
                "zip": "78704",
                "country": "USA",
                "locationId": "844849",
                "subAccountId": "109733",
                "authorizingPersonName": "Test CSP"
              }'
        - lang: JavaScript
          label: JavaScript
          source: |
            const payload = {
              email: "test@email.com",
              name: "Test CSP",
              carrier: "BANDWIDTH",
              houseNumber: "700 S",
              streetName: "1st ST",
              city: "Austin",
              stateCode: "TX",
              zip: "78704",
              country: "USA",
              locationId: "844849",
              subAccountId: "109733",
              authorizingPersonName: "Test CSP"
            };
            
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/csp', {
              method: 'POST',
              headers: {
                'Authorization': 'Bearer <TOKEN>',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/csp"
            payload = {
                "email": "test@email.com",
                "name": "Test CSP",
                "carrier": "BANDWIDTH",
                "houseNumber": "700 S",
                "streetName": "1st ST",
                "city": "Austin",
                "stateCode": "TX",
                "zip": "78704",
                "country": "USA",
                "locationId": "844849",
                "subAccountId": "109733",
                "authorizingPersonName": "Test CSP"
            }
            headers = {
                "Authorization": "Bearer <TOKEN>",
                "Content-Type": "application/json"
            }
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  /csp/{cspUserId}:
    put:
      summary: Update CSP record by ID
      description: Updates an existing CSP record with provided details.
      operationId: updateCSP
      tags:
        - CSP
      parameters:
        - name: cspUserId
          in: path
          required: true
          description: Unique ID of the CSP to update
          schema:
            type: string
            example: "CSP0000001"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "test@email.com"
                name:
                  type: string
                  example: "Test CSP Updated"
                carrier:
                  type: string
                  example: "BANDWIDTH"
                productName:
                  type: string
                  example: "ContextSMS"
                favicon:
                  type: string
                  example: "favicon_url"
                logo:
                  type: string
                  example: "logo_url"
                color:
                  type: string
                  example: "#000000"
      responses:
        "200":
          description: CSP updated successfully
          content:
            application/json:
              schema:
                type: object
                example:
                  cspUserId: "CSP0000001"
                  email: "test@email.com"
                  name: "Test CSP Updated"
                  carrier: "BANDWIDTH"
                  productName: "ContextSMS"
        "400":
          description: Invalid CSP data
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X PUT "https://teams-dev-frontend.sabrhub.com/api/v2/csp/CSP0000001" \
              -H "Authorization: Bearer <TOKEN>" \
              -H "Content-Type: application/json" \
              -d '{"email": "test@email.com", "name": "Test CSP Updated"}'
        - lang: JavaScript
          label: JavaScript
          source: |
            const payload = { email: "test@email.com", name: "Test CSP Updated" };
            
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/csp/CSP0000001', {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer <TOKEN>',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/csp/CSP0000001"
            payload = {"email": "test@email.com", "name": "Test CSP Updated"}
            headers = {
                "Authorization": "Bearer <TOKEN>",
                "Content-Type": "application/json"
            }
            response = requests.put(url, json=payload, headers=headers)
            print(response.json())

  /csp/getcspconfig:
    get:
      summary: Get CSP config by phone
      description: Retrieves CSP configuration based on the phone number.
      operationId: readCspConfig
      tags:
        - CSP
      parameters:
        - name: phoneNumber
          in: query
          required: true
          description: The phone number to get CSP config for (must be URL-encoded).
          schema:
            type: string
            example: "+12223334444"
      responses:
        "200":
          description: CSP configuration retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  productName:
                    type: string
                    example: "ContextSMS"
                  favicon:
                    type: string
                    example: "favicon_url"
                  logo:
                    type: string
                    example: "logo_url"
                  color:
                    type: string
                    example: "#000000"
        "404":
          description: CSP not found
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X GET "https://teams-dev-frontend.sabrhub.com/api/v2/csp/getcspconfig?phoneNumber=%2B12223334444" \
              -H "Authorization: Bearer <TOKEN>"
        - lang: JavaScript
          label: JavaScript
          source: |
            const url = new URL('https://teams-dev-frontend.sabrhub.com/api/v2/csp/getcspconfig');
            url.searchParams.append('phoneNumber', '+12223334444');
            
            const response = await fetch(url, {
              method: 'GET',
              headers: {
                'Authorization': 'Bearer <TOKEN>'
              }
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/csp/getcspconfig"
            params = {"phoneNumber": "+12223334444"}
            headers = {"Authorization": "Bearer <TOKEN>"}
            response = requests.get(url, params=params, headers=headers)
            print(response.json())

  /csp/getcsp:
    post:
      summary: Retrieve CSP details by email
      description: Return CSP record (cspUserId, email, name) for the provided email address. Requires authorization.
      operationId: getCSP
      tags:
        - CSP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "test+Teams@sabrhub.com"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  cspUserId:
                    type: string
                    example: "CSP0000001"
                  email:
                    type: string
                    example: "test+Teams@sabrhub.com"
                  name:
                    type: string
                    example: "Test CSP"
        "401":
          description: Unauthorized
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST "https://teams-dev-frontend.sabrhub.com/api/v2/csp/getcsp" \
              -H "Authorization: Bearer <TOKEN>" \
              -H "Content-Type: application/json" \
              -d '{"email": "test+Teams@sabrhub.com"}'
        - lang: JavaScript
          label: JavaScript
          source: |
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/csp/getcsp', {
              method: 'POST',
              headers: {
                'Authorization': 'Bearer <TOKEN>',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                email: 'test+Teams@sabrhub.com'
              })
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/csp/getcsp"
            payload = {"email": "test+Teams@sabrhub.com"}
            headers = {
                "Authorization": "Bearer <TOKEN>",
                "Content-Type": "application/json"
            }
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  /enterprise/{cspId}:
    post:
      tags:
        - Enterprise Management
      summary: Create enterprise under CSP ID
      description: Create a new enterprise linked to the given CSP ID. Returns enterprise metadata, created/update timestamps and status.
      operationId: createEnterprise
      parameters:
        - name: cspId
          in: path
          required: true
          description: Unique CSP ID for which the enterprise is being created.
          schema:
            type: string
            example: "CSP0000003"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - contact
                - number
                - email
              properties:
                name:
                  type: string
                  example: "test enterprise2"
                contact:
                  type: string
                  example: "Test Contact"
                number:
                  type: string
                  example: "+12223334444"
                email:
                  type: string
                  format: email
                  example: "test@email.com"
      responses:
        '201':
          description: Enterprise created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  enterpriseId:
                    type: string
                    example: "E0000090"
                  name:
                    type: string
                    example: "test enterprise2"
                  contact:
                    type: string
                    example: "Test Contact"
                  number:
                    type: string
                    example: "+12223334444"
                  email:
                    type: string
                    format: email
                    example: "test@email.com"
                  deleted:
                    type: boolean
                    example: false
                  createdDate:
                    type: integer
                    format: int64
                    example: 1698446777442
                  updateDate:
                    type: integer
                    format: int64
                    example: 1698446777443
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST "https://teams-dev-frontend.sabrhub.com/api/v2/enterprise/CSP0000003" \
              -H "Authorization: Bearer <TOKEN>" \
              -H "Content-Type: application/json" \
              -d '{
                "name": "test enterprise2",
                "contact": "Test Contact",
                "number": "+12223334444",
                "email": "test@email.com"
              }'
        - lang: JavaScript
          label: JavaScript
          source: |
            const payload = {
              name: "test enterprise2",
              contact: "Test Contact",
              number: "+12223334444",
              email: "test@email.com"
            };
            
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/enterprise/CSP0000003', {
              method: 'POST',
              headers: {
                'Authorization': 'Bearer <TOKEN>',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/enterprise/CSP0000003"
            payload = {
                "name": "test enterprise2",
                "contact": "Test Contact",
                "number": "+12223334444",
                "email": "test@email.com"
            }
            headers = {
                "Authorization": "Bearer <TOKEN>",
                "Content-Type": "application/json"
            }
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  /enterprise/getenterprise/{enterpriseId}:
    get:
      tags:
        - Enterprise Management
      summary: Fetch single enterprise by ID
      description: Retrieve full enterprise details (name, contact, number, email, deleted flag, timestamps) for the specified enterpriseId.
      operationId: readSingleEnterprise
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            example: "E0000090"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  enterpriseId:
                    type: string
                    example: "E0000090"
                  name:
                    type: string
                    example: "test enterprise2"
                  contact:
                    type: string
                    example: "Test Contact"
                  number:
                    type: string
                    example: "+12223334444"
                  email:
                    type: string
                    example: "test@example.com"
                  deleted:
                    type: boolean
                    example: false
                  createdDate:
                    type: integer
                    example: 1698446777442
                  updateDate:
                    type: integer
                    example: 1698446777443
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X GET "https://teams-dev-frontend.sabrhub.com/api/v2/enterprise/getenterprise/E0000090" \
              -H "Authorization: Bearer <TOKEN>"
        - lang: JavaScript
          label: JavaScript
          source: |
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/enterprise/getenterprise/E0000090', {
              method: 'GET',
              headers: {
                'Authorization': 'Bearer <TOKEN>'
              }
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/enterprise/getenterprise/E0000090"
            headers = {"Authorization": "Bearer <TOKEN>"}
            response = requests.get(url, headers=headers)
            print(response.json())

  /csp/enterprises/{cspId}:
    get:
      operationId: getEnterpriseList
      tags:
        - Enterprise Management
      summary: List all enterprises for CSP ID
      description: Return an array of enterprises associated with the given CSP (contact info and mapping summary included).
      parameters:
        - name: cspId
          in: path
          required: true
          description: CSP ID to get enterprises for
          schema:
            type: string
            example: "CSP0000003"
      responses:
        '200':
          description: A list of enterprises with their contact details and messaging app mappings.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    enterpriseId:
                      type: string
                      example: "E0000001"
                    name:
                      type: string
                      example: "Internal testing1"
                    contact:
                      type: string
                      example: "Test Contact"
                    number:
                      type: string
                      example: "+12223334444"
                    email:
                      type: string
                      example: "test@example.com"
                    deleted:
                      type: boolean
                      example: false
        '404':
          description: Enterprises not found
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X GET "https://teams-dev-frontend.sabrhub.com/api/v2/csp/enterprises/CSP0000003" \
              -H "Authorization: Bearer <TOKEN>"
        - lang: JavaScript
          label: JavaScript
          source: |
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/csp/enterprises/CSP0000003', {
              method: 'GET',
              headers: {
                'Authorization': 'Bearer <TOKEN>'
              }
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/csp/enterprises/CSP0000003"
            headers = {"Authorization": "Bearer <TOKEN>"}
            response = requests.get(url, headers=headers)
            print(response.json())

  /enterprise/deleteenterprise/{enterpriseId}:
    delete:
      operationId: deleteEnterprise
      tags:
        - Enterprise Management
      summary: Delete enterprise by ID
      description: Remove the enterprise identified by enterpriseId. Returns a deletion confirmation or 404 if not found.
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            example: "E0000090"
      responses:
        '200':
          description: Enterprise deleted successfully.
          content:
            text/plain:
              schema:
                type: string
                example: "Deleted enterprise E0000090"
        '404':
          description: Enterprise not found
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X DELETE "https://teams-dev-frontend.sabrhub.com/api/v2/enterprise/deleteenterprise/E0000090" \
              -H "Authorization: Bearer <TOKEN>"
        - lang: JavaScript
          label: JavaScript
          source: |
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/enterprise/deleteenterprise/E0000090', {
              method: 'DELETE',
              headers: {
                'Authorization': 'Bearer <TOKEN>'
              }
            });
            const text = await response.text();
            console.log(text);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/enterprise/deleteenterprise/E0000090"
            headers = {"Authorization": "Bearer <TOKEN>"}
            response = requests.delete(url, headers=headers)
            print(response.text)

  /mapping/add/{enterpriseId}:
    post:
      operationId: addMapping
      tags:
        - Mapping Management
      summary: Add phone-to-app mapping
      description: Create a number→messaging-app mapping for the specified enterprise. Returns the mapping id and mapping details.
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            example: "E0000027"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phoneNumber
                - messagingAppType
                - messagingAppId
                - name
              properties:
                phoneNumber:
                  type: string
                  example: "+12223334444"
                messagingAppType:
                  type: string
                  example: "Teams"
                messagingAppId:
                  type: string
                  example: "test@example.com"
                name:
                  type: string
                  example: "Tester"
      responses:
        '200':
          description: Mapping added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  numberToMessageAppMapId:
                    type: string
                    example: "NTMAP0000123"
                  phoneNumber:
                    type: string
                    example: "+12223334444"
                  messagingAppType:
                    type: string
                    example: "Teams"
                  messagingAppId:
                    type: string
                    example: "test@example.com"
                  name:
                    type: string
                    example: "Tester"
        '400':
          description: Invalid mapping data
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST "https://teams-dev-frontend.sabrhub.com/api/v2/mapping/add/E0000027" \
              -H "Authorization: Bearer <TOKEN>" \
              -H "Content-Type: application/json" \
              -d '{
                "phoneNumber": "+12223334444",
                "messagingAppType": "Teams",
                "messagingAppId": "test@example.com",
                "name": "Tester"
              }'
        - lang: JavaScript
          label: JavaScript
          source: |
            const payload = {
              phoneNumber: "+12223334444",
              messagingAppType: "Teams",
              messagingAppId: "test@example.com",
              name: "Tester"
            };
            
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/mapping/add/E0000027', {
              method: 'POST',
              headers: {
                'Authorization': 'Bearer <TOKEN>',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/mapping/add/E0000027"
            payload = {
                "phoneNumber": "+12223334444",
                "messagingAppType": "Teams",
                "messagingAppId": "test@example.com",
                "name": "Tester"
            }
            headers = {
                "Authorization": "Bearer <TOKEN>",
                "Content-Type": "application/json"
            }
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  /mapping/csp/{cspId}:
    get:
      operationId: getMappingsByCsp
      tags:
        - Mapping Management
      summary: List all mappings for CSP ID
      description: Retrieve all number-to-message-app mappings across enterprises under the provided CSP ID.
      parameters:
        - name: cspId
          in: path
          required: true
          schema:
            type: string
            example: "CSP0000020"
      responses:
        '200':
          description: List of mappings associated with the CSP.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    enterpriseId:
                      type: string
                      example: "E0000001"
                    numberToMessageAppMap:
                      type: object
                      properties:
                        numberToMessageAppMapId:
                          type: string
                          example: "NTMAP0000123"
                        phoneNumber:
                          type: string
                          example: "+12223334444"
                        messagingAppType:
                          type: string
                          example: "Teams"
                        messagingAppId:
                          type: string
                          example: "test@example.com"
                        name:
                          type: string
                          example: "Mapping Name"
        '404':
          description: No mappings found
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X GET "https://teams-dev-frontend.sabrhub.com/api/v2/mapping/csp/CSP0000020" \
              -H "Authorization: Bearer <TOKEN>"
        - lang: JavaScript
          label: JavaScript
          source: |
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/mapping/csp/CSP0000020', {
              method: 'GET',
              headers: {
                'Authorization': 'Bearer <TOKEN>'
              }
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/mapping/csp/CSP0000020"
            headers = {"Authorization": "Bearer <TOKEN>"}
            response = requests.get(url, headers=headers)
            print(response.json())
  /numbertomessageappmapping/enterprise/{enterpriseId}:
    get:
      operationId: getEnterpriseMappings
      tags:
        - Mapping Management
      summary: List enterprise mappings by ID
      description: Return mappings for the specified enterprise (phoneNumber, messagingAppType, messagingAppId, name).
      parameters:
        - name: enterpriseId
          in: path
          required: true
          schema:
            type: string
            example: "E0000001"
      responses:
        '200':
          description: List of mappings for the specified enterprise.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    enterpriseId:
                      type: string
                      example: "E0000001"
                    numberToMessageAppMap:
                      type: object
                      properties:
                        numberToMessageAppMapId:
                          type: string
                          example: "NTMAP0000123"
                        phoneNumber:
                          type: string
                          example: "+12223334444"
                        messagingAppType:
                          type: string
                          example: "Teams"
                        messagingAppId:
                          type: string
                          example: "test@example.com"
                        name:
                          type: string
                          example: "Mapping Name"
        '404':
          description: Enterprise not found
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X GET "https://teams-dev-frontend.sabrhub.com/api/v2/numbertomessageappmapping/enterprise/E0000001" \
              -H "Authorization: Bearer <TOKEN>"
        - lang: JavaScript
          label: JavaScript
          source: |
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/numbertomessageappmapping/enterprise/E0000001', {
              method: 'GET',
              headers: {
                'Authorization': 'Bearer <TOKEN>'
              }
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/numbertomessageappmapping/enterprise/E0000001"
            headers = {"Authorization": "Bearer <TOKEN>"}
            response = requests.get(url, headers=headers)
            print(response.json())
  /mapping/{numberToMessageAppMapId}:
    put:
      summary: Update mapping details by ID
      description: Update the messagingAppId and/or phoneNumber for the specified mapping ID and return the updated mapping.
      operationId: updateMapping
      tags:
        - Mapping Management
      parameters:
        - name: numberToMessageAppMapId
          in: path
          required: true
          schema:
            type: string
            example: "NTMAP0000123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messagingAppId:
                  type: string
                  example: "app456"
                phoneNumber:
                  type: string
                  example: "0987654321"
      responses:
        '200':
          description: Mapping updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  numberToMessageAppMapId:
                    type: string
                    example: "NTMAP0000123"
                  messagingAppId:
                    type: string
                    example: "app456"
                  phoneNumber:
                    type: string
                    example: "0987654321"
        '400':
          description: Invalid mapping update
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X PUT "https://teams-dev-frontend.sabrhub.com/api/v2/mapping/NTMAP0000123" \
              -H "Authorization: Bearer <TOKEN>" \
              -H "Content-Type: application/json" \
              -d '{"messagingAppId": "app456", "phoneNumber": "0987654321"}'
        - lang: JavaScript
          label: JavaScript
          source: |
            const payload = {
              messagingAppId: "app456",
              phoneNumber: "0987654321"
            };
            
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/mapping/NTMAP0000123', {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer <TOKEN>',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/mapping/NTMAP0000123"
            payload = {
                "messagingAppId": "app456",
                "phoneNumber": "0987654321"
            }
            headers = {
                "Authorization": "Bearer <TOKEN>",
                "Content-Type": "application/json"
            }
            response = requests.put(url, json=payload, headers=headers)
            print(response.json())

    delete:
      summary: Delete mapping by its ID
      description: Delete the mapping identified by numberToMessageAppMapId. Returns 204 on success or 404 if the mapping is not found.
      operationId: deleteMappingById
      tags:
        - Mapping Management
      parameters:
        - name: numberToMessageAppMapId
          in: path
          required: true
          description: "The ID of the message app map to be deleted."
          schema:
            type: string
          example: "NTMAP0000123"
      responses:
        '200':
          description: Mapping deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Deleted mapping NTMAP0000123"
        '404':
          description: Mapping not found
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X DELETE "https://teams-dev-frontend.sabrhub.com/api/v2/mapping/NTMAP0000123" \
              -H "Authorization: Bearer <TOKEN>"
        - lang: JavaScript
          label: JavaScript
          source: |
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/mapping/NTMAP0000123', {
              method: 'DELETE',
              headers: {
                'Authorization': 'Bearer <TOKEN>'
              }
            });
            const text = await response.text();
            console.log(text);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/mapping/NTMAP0000123"
            headers = {"Authorization": "Bearer <TOKEN>"}
            response = requests.delete(url, headers=headers)
            print(response.text)

  /mapping/messagingAppId:
    post:
      summary: Retrieve mapping by app ID
      description: Lookup and return mapping details using messagingAppId (phone, app type, mapping id, name).
      operationId: readMappingByMessagingAppId
      tags:
        - Mapping Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messagingAppId:
                  type: string
                  example: "app789"
      responses:
        '200':
          description: Mapping read successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  numberToMessageAppMapId:
                    type: string
                    example: "NTMAP0000456"
                  messagingAppId:
                    type: string
                    example: "app789"
                  phoneNumber:
                    type: string
                    example: "+12223334444"
                  messagingAppType:
                    type: string
                    example: "Teams"
        '400':
          description: Invalid request
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST "https://teams-dev-frontend.sabrhub.com/api/v2/mapping/messagingAppId" \
              -H "Authorization: Bearer <TOKEN>" \
              -H "Content-Type: application/json" \
              -d '{"messagingAppId": "app789"}'
        - lang: JavaScript
          label: JavaScript
          source: |
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/mapping/messagingAppId', {
              method: 'POST',
              headers: {
                'Authorization': 'Bearer <TOKEN>',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                messagingAppId: 'app789'
              })
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/mapping/messagingAppId"
            payload = {"messagingAppId": "app789"}
            headers = {
                "Authorization": "Bearer <TOKEN>",
                "Content-Type": "application/json"
            }
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  /stripe/check-payment:
    post:
      summary: Check payment status by email
      description: Verify whether the given email has an active paid subscription or transaction. Returns paid boolean and subscription status.
      tags:
        - Stripe Webhook  
      operationId: checkPaidStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "test_mapping_teams_3@test.com"
      responses:
        '200':
          description: Payment status checked
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: "test_mapping_teams_3@test.com"
                  paid:
                    type: boolean
                    example: true
                  subscriptionStatus:
                    type: string
                    example: "active"
        '400':
          description: Invalid payment details
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST "https://teams-dev-frontend.sabrhub.com/api/v2/stripe/check-payment" \
              -H "Authorization: Bearer <TOKEN>" \
              -H "Content-Type: application/json" \
              -d '{"email": "test_mapping_teams_3@test.com"}'
        - lang: JavaScript
          label: JavaScript
          source: |
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/stripe/check-payment', {
              method: 'POST',
              headers: {
                'Authorization': 'Bearer <TOKEN>',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                email: 'test_mapping_teams_3@test.com'
              })
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/stripe/check-payment"
            payload = {"email": "test_mapping_teams_3@test.com"}
            headers = {
                "Authorization": "Bearer <TOKEN>",
                "Content-Type": "application/json"
            }
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  /stripe/webhook:
    post:
      summary: Process Stripe webhook events
      description: Accept and validate incoming Stripe webhook payloads, process events (e.g., subscription updates) and return processing status.
      tags:
        - Stripe Webhook     
      operationId: stripeWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "evt_1MqqbKLt4dXK03v5qaIbiNCC"
                object:
                  type: string
                  example: "event"
                api_version:
                  type: string
                  example: "2023-10-16"
                created:
                  type: integer
                  example: 1680064028
                type:
                  type: string
                  example: "customer.subscription.updated"
                data:
                  type: object
                  properties:
                    object:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "sub_1Mqqb6Lt4dXK03v50OA219Ya"
                        object:
                          type: string
                          example: "subscription"
                        status:
                          type: string
                          example: "active"
                livemode:
                  type: boolean
                  example: false
      responses:
        '200':
          description: Webhook received successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "received"
                  processed:
                    type: boolean
                    example: true
        '400':
          description: Invalid webhook payload
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST "https://teams-dev-frontend.sabrhub.com/api/v2/stripe/webhook" \
              -H "Content-Type: application/json" \
              -d '{
                "id": "evt_1MqqbKLt4dXK03v5qaIbiNCC",
                "object": "event",
                "api_version": "2023-10-16",
                "type": "customer.subscription.updated"
              }'
        - lang: JavaScript
          label: JavaScript
          source: |
            const payload = {
              id: "evt_1MqqbKLt4dXK03v5qaIbiNCC",
              object: "event",
              api_version: "2023-10-16",
              type: "customer.subscription.updated"
            };
            
            const response = await fetch('https://teams-dev-frontend.sabrhub.com/api/v2/stripe/webhook', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });
            const data = await response.json();
            console.log(data);
        - lang: Python
          label: Python
          source: |
            import requests
            
            url = "https://teams-dev-frontend.sabrhub.com/api/v2/stripe/webhook"
            payload = {
                "id": "evt_1MqqbKLt4dXK03v5qaIbiNCC",
                "object": "event",
                "api_version": "2023-10-16",
                "type": "customer.subscription.updated"
            }
            headers = {"Content-Type": "application/json"}
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())
